!function(e){var n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./client/bundles/index/index.js")}({"./client/bundles/index/components/QuestionBox.js":
/*!********************************************************!*\
  !*** ./client/bundles/index/components/QuestionBox.js ***!
  \********************************************************/
/*! no static exports found */function(e,n,t){"use strict";var i,o=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),r=t(/*! newsha */"./node_modules/newsha/lib/index.js");(i=r)&&i.__esModule;var a=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.questionBox=document.querySelector(".question-box"),this.chatBox=document.querySelector(".chat-box"),this.mainTitle=document.querySelector(".question-box > .title"),this.newsha=new Newsha({lang:"en"}),this.newsha.isActive=!1,this.isTypingMode=!1,this.canType=!1,this.isTyping=!1,this.initNewsha(),this.init()}return o(e,[{key:"initNewsha",value:function(){var e=this;this.newsha.any(this.onResult.bind(this)),this.newsha.command("alireza",function(n){e.isTyping||e.isTypingMode||e.canType||e.enableTypingMode()})}},{key:"init",value:function(){var e=this;this.questionBox.onclick=function(){e.isTyping||(e.newsha.isActive||(e.newsha.listen(),e.newsha.isActive=!0),e.toggleTypingMode())}}},{key:"toggleTypingMode",value:function(){this.isTypingMode?this.disableTypingMode():this.enableTypingMode()}},{key:"enableTypingMode",value:function(){this.isTypingMode=!0,this.canType=!0,this.mainTitle.innerHTML="[Say something]",this.questionBox.classList.add("typing-mode")}},{key:"disableTypingMode",value:function(){this.isTypingMode=!1,this.canType=!1,this.mainTitle.innerHTML="Ask me questions",this.questionBox.classList.remove("typing-mode")}},{key:"onResult",value:function(e){this.canType&&this.type(e)}},{key:"type",value:function(e){var n=this;return new Promise(function(t){var i=e.split(" "),o=0;n.canType=!1,n.isTyping=!0;for(var r=function(e){0===e&&(n.mainTitle.innerHTML=""),o+=Math.floor(200*Math.random())+100,setTimeout(function(){n.mainTitle.innerHTML+=i[e]+" "},o)},a=0;a<i.length;a++)r(a);setTimeout(function(){n.isTyping=!1,n.throwTextToChatBox(e)},o+500)})}},{key:"throwTextToChatBox",value:function(e){var n=this;this.mainTitle.innerHTML="";var t=document.createElement("p");this.questionBox.offsetTop,this.chatBox.offsetHeight,this.questionBox.offsetLeft;t.classList.add("user"),t.innerHTML=e,this.chatBox.appendChild(t),setTimeout(function(){n.disableTypingMode()},500)}}]),e}();e.exports=a},"./client/bundles/index/index.js":
/*!***************************************!*\
  !*** ./client/bundles/index/index.js ***!
  \***************************************/
/*! no static exports found */function(e,n,t){"use strict";var i,o=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),r=t(/*! ./components/QuestionBox */"./client/bundles/index/components/QuestionBox.js"),a=(i=r)&&i.__esModule?i:{default:i};var s=new(function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.questionBox=new a.default}return o(e,[{key:"onLoad",value:function(){document.body.classList.add("ready")}}]),e}());window.onload=function(){return s.onLoad()}},"./node_modules/leven/index.js":
/*!*************************************!*\
  !*** ./node_modules/leven/index.js ***!
  \*************************************/
/*! no static exports found */function(e,n,t){"use strict";var i=[],o=[];e.exports=function(e,n){if(e===n)return 0;var t=e;e.length>n.length&&(e=n,n=t);var r=e.length,a=n.length;if(0===r)return a;if(0===a)return r;for(;r>0&&e.charCodeAt(~-r)===n.charCodeAt(~-a);)r--,a--;if(0===r)return a;for(var s,l,c,u,f=0;f<r&&e.charCodeAt(f)===n.charCodeAt(f);)f++;if(a-=f,0===(r-=f))return a;for(var h=0,d=0;h<r;)o[f+h]=e.charCodeAt(f+h),i[h]=++h;for(;d<a;)for(s=n.charCodeAt(f+d),c=d++,l=d,h=0;h<r;h++)u=s===o[f+h]?c:c+1,c=i[h],l=i[h]=c>l?u>l?l+1:u:u>c?c+1:u;return l}},"./node_modules/newsha/lib/index.js":
/*!******************************************!*\
  !*** ./node_modules/newsha/lib/index.js ***!
  \******************************************/
/*! no static exports found */function(e,n,t){"use strict";var i,o=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),r=t(/*! similarity */"./node_modules/similarity/index.js"),a=(i=r)&&i.__esModule?i:{default:i};String.prototype.faOptimize=function(){return this.replace(/ص/g,"س").replace(/ث/g,"س").replace(/ظ/g,"ز").replace(/ذ/g,"ز").replace(/ض/g,"ز").replace(/ط/g,"ت").replace(/ح/g,"ه").replace(/غ/g,"ق")};var s=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.commands=[],this.collections={},this.minimumConfidence=.4,this.config=n,this.anyListeners=[],this.recognition=new(window.SpeechRecognition||window.webkitSpeechRecognition||window.mozSpeechRecognition||window.msSpeechRecognition),this.recognition.lang=n.lang||"fa",this.recognition.continuous=n.continuous||!1,this.recognition.onresult=this.onResult.bind(this),this.recognition.onend=this.onEnd.bind(this)}return o(e,[{key:"onResult",value:function(e){var n="",t=!0,i=!1,o=void 0;try{for(var r,a=e.results[Symbol.iterator]();!(t=(r=a.next()).done);t=!0){n+=r.value[0].transcript}}catch(e){i=!0,o=e}finally{try{!t&&a.return&&a.return()}finally{if(i)throw o}}var s=!0,l=!1,c=void 0;try{for(var u,f=this.anyListeners[Symbol.iterator]();!(s=(u=f.next()).done);s=!0){(0,u.value)(n)}}catch(e){l=!0,c=e}finally{try{!s&&f.return&&f.return()}finally{if(l)throw c}}this.checkResults(n)}},{key:"onEnd",value:function(){this.listen()}},{key:"checkSingleCommand",value:function(e,n){var t=0,i=(e=e.trim()).indexOf("{");if(-1!==i){var o=e.indexOf("}"),r=e.substr(i+1,o-i-1),s=null,l=0,c=!0,u=!1,f=void 0;try{for(var h,d=this.collections[r][Symbol.iterator]();!(c=(h=d.next()).done);c=!0){var y=h.value;t=0;var v=!0,m=!1,p=void 0;try{for(var g,w=n.split(" ")[Symbol.iterator]();!(v=(g=w.next()).done);v=!0){var x=g.value;t=Math.max((0,a.default)(x.faOptimize(),y.name.faOptimize()),t)}}catch(e){m=!0,p=e}finally{try{!v&&w.return&&w.return()}finally{if(m)throw p}}l<t&&(l=t,s=y)}}catch(e){u=!0,f=e}finally{try{!c&&d.return&&d.return()}finally{if(u)throw f}}return{collectionName:r,data:s,confidence:l,isTrue:l>=this.minimumConfidence}}var b=!0,T=!1,k=void 0;try{for(var M,C=n.split(" ")[Symbol.iterator]();!(b=(M=C.next()).done);b=!0){var S=M.value;t=Math.max((0,a.default)(S.faOptimize(),e.faOptimize()),t)}}catch(e){T=!0,k=e}finally{try{!b&&C.return&&C.return()}finally{if(T)throw k}}return{confidence:t,isTrue:t>=this.minimumConfidence}}},{key:"checkResults",value:function(e){var n=!0,t=!1,i=void 0;try{for(var o,r=this.commands[Symbol.iterator]();!(n=(o=r.next()).done);n=!0){var a=o.value,s={command:a.command,transcript:e,collections:{}},l=!0,c=0,u=a.command.split("&&"),f=!0,h=!1,d=void 0;try{for(var y,v=u[Symbol.iterator]();!(f=(y=v.next()).done);f=!0){var m=y.value,p=this.checkSingleCommand(m,e);l=l&&p.isTrue,c+=p.confidence,p.data&&(s.collections[p.collectionName]=p.data.value)}}catch(e){h=!0,d=e}finally{try{!f&&v.return&&v.return()}finally{if(h)throw d}}c/=u.length,s.confidence=c,l&&a.callback(s)}}catch(e){t=!0,i=e}finally{try{!n&&r.return&&r.return()}finally{if(t)throw i}}}},{key:"command",value:function(e,n){this.commands.push({command:e,callback:n})}},{key:"collection",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(e){return e};this.collections[e]=[];var i=!0,o=!1,r=void 0;try{for(var a,s=n[Symbol.iterator]();!(i=(a=s.next()).done);i=!0){var l=a.value;this.collections[e].push({name:l,value:t(l)})}}catch(e){o=!0,r=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw r}}return this.collections[e]}},{key:"any",value:function(e){this.anyListeners.push(e)}},{key:"listen",value:function(){this.recognition.start()}},{key:"stop",value:function(){this.recognition.stop()}}]),e}();e.exports=window.Newsha=s},"./node_modules/similarity/index.js":
/*!******************************************!*\
  !*** ./node_modules/similarity/index.js ***!
  \******************************************/
/*! no static exports found */function(e,n,t){var i=t(/*! leven */"./node_modules/leven/index.js");e.exports=function(e,n){if(!(e&&n&&e.length&&n.length))return 0;if(e===n)return 1;var t=i(e.toLowerCase(),n.toLowerCase()),o=Math.max(e.length,n.length);return(o-t)/o}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,